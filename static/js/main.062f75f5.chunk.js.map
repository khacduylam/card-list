{"version":3,"sources":["components/common/header.component.jsx","components/common/footer.component.jsx","components/card/card.component.jsx","components/card-box/card-box.component.jsx","components/common/search-form.component.jsx","components/App/App.js","serviceWorker.js","index.js"],"names":["Header","props","id","Navbar","expand","children","Footer","className","Date","toDateString","CustomCard","imgUrl","caption","Card","style","width","Img","src","Body","Title","CardBox","data","collNum","length","rowNum","Math","ceil","cardRows","Array","keys","map","row","subData","slice","cards","i","item","Col","key","name","Row","Container","SearchForm","placeholder","onChange","Form","inline","FormControl","App","state","initialUsers","users","searchVal","bind","e","str","target","value","fUsers","this","filter","u","toLowerCase","includes","setState","fetch","then","res","json","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sSAceA,EAVA,SAACC,GACd,OACE,4BAAQC,GAAG,UACT,kBAACC,EAAA,EAAD,CAAQC,OAAO,MACZH,EAAMI,YCIAC,EAVA,WACb,OACE,4BAAQJ,GAAG,SAASK,UAAU,oBAC5B,+CACA,4BAAI,IAAIC,MAAOC,gBACf,6C,wCCQSC,EAXI,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC5B,OACE,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,QAAUR,UAAU,aACxC,kBAACM,EAAA,EAAKG,IAAN,CAAUC,IAAKN,IACf,kBAACE,EAAA,EAAKK,KAAN,KACE,kBAACL,EAAA,EAAKM,MAAN,KAAcP,MCyBPQ,EA7BC,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAEXC,EAAUD,EAAKE,OAEfC,EAAUC,KAAKC,KAAKJ,EADP,GAGbK,EAAW,YAAK,IAAIC,MAAMJ,GAAQK,QAASC,KAAI,SAAAC,GACnD,IAAMC,EAAUX,EAAKY,MAJJ,EAIUF,EAJV,EAI4BA,EAJ5B,GAKXG,EAAQ,YAAK,IAAIN,MALN,GAKwBC,QAASC,KAAI,SAAAK,GACpD,IAAMC,EAAOJ,EAAQG,GACrB,OACEC,EACE,kBAACC,EAAA,EAAD,CAAKC,IAAG,cAASF,EAAKlC,KACpB,kBAAC,EAAD,CAAMS,OAAM,+BAA0ByB,EAAKlC,GAA/B,aAA8CU,QAASwB,EAAKG,QAG1E,kBAACF,EAAA,EAAD,CAAKC,IAAG,cAASH,EAAT,iBAKd,OAAO,kBAACK,EAAA,EAAD,CAAKF,IAAG,cAASP,IAAQG,MAGlC,OACE,kBAACO,EAAA,EAAD,KAAYd,I,gBCdDe,EAZI,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SACjC,OACE,kBAACC,EAAA,EAAD,CAAMC,QAAM,GACV,kBAACC,EAAA,EAAD,CACEJ,YAAaA,EACbC,SAAUA,EACVrC,UAAU,cCoDHyC,G,wBAnDb,WAAY/C,GAAQ,IAAD,8BACjB,4CAAMA,KAEDgD,MAAQ,CACXC,aAAc,GACdC,MAAO,GACPC,UAAW,IAGb,EAAKR,SAAW,EAAKA,SAASS,KAAd,gBATC,E,sEAYVC,GACP,IAAMC,EAAMD,EAAEE,OAAOC,MACrB,GAAIF,EAEG,CACL,IACMG,EADSC,KAAKV,MAAMC,aACJU,QACpB,SAAAC,GAAC,OAAIA,EAAEtB,KAAKuB,cAAcC,SAASR,EAAIO,kBAEzCH,KAAKK,SAAS,CACZb,MAAOO,EACPN,UAAWG,SARbI,KAAKK,SAAS,CAAEb,MAAOQ,KAAKV,MAAMC,aAAcE,UAAW,O,0CAa1C,IAAD,OAClBa,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAf,GAAK,OAAI,EAAKa,SAAS,CAAEd,aAAcC,EAAOA,e,+BAItD,OACE,yBAAK5C,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAYgC,KAAK,YAAYI,YAAY,mBAAmBC,SAAUe,KAAKf,YAG7E,6BAAS1C,GAAG,QACV,kBAAC,EAAD,CAASmB,KAAMsC,KAAKV,MAAME,SAG5B,kBAAC,EAAD,W,GA9CUkB,cCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMf,MAAK,SAAAgB,GACjCA,EAAaC,kB","file":"static/js/main.062f75f5.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Navbar } from 'react-bootstrap';\n\nconst Header = (props) => {\n  return (\n    <header id='header'>\n      <Navbar expand='lg'>\n        {props.children}\n      </Navbar>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\n\nconst Footer = () => {\n  return (\n    <footer id='footer' className='mt-1 text-center'>\n      <h3>Demo React App.</h3>\n      <p>{new Date().toDateString()}</p>\n      <p>Khac Duy Lam</p>\n    </footer>\n  );\n};\n\nexport default Footer\n","import React from 'react';\n\nimport { Card } from 'react-bootstrap';\n\nconst CustomCard = ({ imgUrl, caption }) => {\n  return (\n    <Card style={{ width: '100%' }} className='mt-3 mb-3'>\n      <Card.Img src={imgUrl} />\n      <Card.Body>\n        <Card.Title>{ caption }</Card.Title>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default CustomCard;","import React from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nimport Card from '../card/card.component';\n\nconst CardBox = ({ data }) => {\n\n  const collNum = data.length;\n  const maxCollNum = 4;\n  const rowNum  = Math.ceil(collNum / maxCollNum);\n\n  const cardRows = [ ...new Array(rowNum).keys() ].map(row => {\n    const subData = data.slice(row * maxCollNum, row * maxCollNum + maxCollNum);\n    const cards = [ ...new Array(maxCollNum).keys() ].map(i => {\n      const item = subData[i];\n      return (\n        item ? (\n          <Col key={`col-${item.id}`}>\n            <Card imgUrl={`https://robohash.org/${item.id}?set=set2`} caption={item.name} />\n          </Col>\n        ) : (\n          <Col key={`col-${i}-padding`} />\n        )\n      );\n    });\n\n    return <Row key={`row-${row}`}>{cards}</Row>\n  });\n\n  return (\n    <Container>{cardRows}</Container>\n  );\n};\n\nexport default CardBox;\n","import React from 'react';\n\nimport { Form, FormControl } from 'react-bootstrap';\n\nconst SearchForm = ({ placeholder, onChange }) => {\n  return (\n    <Form inline>\n      <FormControl\n        placeholder={placeholder}\n        onChange={onChange}\n        className='ml-3 pd'\n      />\n    </Form>\n  );\n};\n\nexport default SearchForm;","import React, { Component } from 'react';\n\nimport Header from '../common/header.component';\nimport Footer from '../common/footer.component';\nimport CardBox from '../card-box/card-box.component';\nimport SearchForm from '../common/search-form.component';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      initialUsers: [],\n      users: [],\n      searchVal: ''\n    };\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(e) {\n    const str = e.target.value;\n    if(!str) {\n      this.setState({ users: this.state.initialUsers, searchVal: '' });\n    } else {\n      const iUsers = this.state.initialUsers;\n      const fUsers = iUsers.filter(\n        u => u.name.toLowerCase().includes(str.toLowerCase())\n      );\n      this.setState({\n        users: fUsers,\n        searchVal: str\n      });\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(res => res.json())\n      .then(users => this.setState({ initialUsers: users, users }));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header>\n          <SearchForm name='searchVal' placeholder='Search users ...' onChange={this.onChange} />\n        </Header>\n\n        <section id='body'>\n          <CardBox data={this.state.users} />\n        </section>\n\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}